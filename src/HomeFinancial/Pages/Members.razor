@page "/members"

@using HomeFinancial.Application.Services
@using HomeFinancial.Application.Contracts.Commands
@using HomeFinancial.Application.Contracts.Responses

@inject IMemberAppService _memberAppService

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <h2 class="mat-h2">Membros &nbsp; <MatButton OnClick="@(e => { _newMemberDialogOpened = true; })" Raised="true" Class=" mdc-theme--secondary-bg mdc-theme--on-secondary">Novo Membro</MatButton></h2>
        </div>

        @if (_members == null)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p><em>Loading...</em></p>
            </div>
        }
        else
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                <MatTable Items="@_members" class="mat-elevation-z2" ShowPaging="false" Striped="true" Style="margin-top: 0px !important;">
                    <MatTableHeader>
                        <th>Nome</th>
                        <th>&nbsp;</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>
                            <MatIcon Icon="@(context.Id == _selectedMember.Id ? "radio_button_checked": "radio_button_unchecked")"></MatIcon>
                            @context.Name
                        </td>
                        <td>
                            <MatButton Dense="true" OnClick="async () => await ViewMemberAsync(context)" Icon="arrow_right_alt"></MatButton>
                        </td>
                    </MatTableRow>
                </MatTable>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8 mat-elevation-z2">
                <div class="mat-body1" style="padding: 5px !important;"><b>Nome:&nbsp;@_selectedMember?.Name</b></div>
                <MatTabGroup @bind-ActiveIndex="@_selectedMemberActiveTabIndex">
                    <MatTab Label="Contas">
                        <div class="mat-layout-grid-inner">
                            @foreach (var account in _selectedMember.Accounts)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                    <MatCard Class="mat-elevation-z2" Style="padding: 5px !important;">
                                        <MatCardContent>
                                            <div class="mat-body1" style="padding: 5px !important;">
                                                <b>@account.ReferenceName</b>
                                            </div>
                                            <div class="mat-subtitle2" style="padding: 5px !important;">
                                                @(account.IsSaving ? "Conta Poupança" : "Conta Corrente")
                                            </div>
                                            <MatBody2 Style="@(account.Balance < 0 ? "text-align: right; color: red;" : "text-align: right; color: blue")">
                                                Saldo: <b>@account.Balance.ToString("c")</b>
                                            </MatBody2>
                                        </MatCardContent>
                                    </MatCard>
                                </div>
                            }
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                <MatCard Class="mat-elevation-z2 mdc-theme--secondary-bg mdc-theme--on-secondary" Style="padding: 5px !important;"
                                         @onclick="e => { _newAccountDialogOpened = true; }">
                                    <MatCardContent>
                                        <div class="mat-body1" style="padding: 5px !important;">
                                            <b>Adicionar Nova Conta</b>
                                        </div>
                                        <div class="mat-subtitle2" style="padding: 5px !important;">
                                            &nbsp;
                                        </div>
                                        <MatBody2>
                                            &nbsp;
                                        </MatBody2>
                                    </MatCardContent>
                                </MatCard>
                            </div>
                        </div>
                    </MatTab>
                    <MatTab Label="Cartões de Crédito">
                        <div class="mat-layout-grid-inner">
                            @foreach (var creditCard in _selectedMember.CreditCards)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                    <MatCard Class="mat-elevation-z2" Style="@($"padding: 5px !important; background-color: {creditCard.Color};")">
                                        <MatCardContent>
                                            <div class="mat-body1" style="padding: 5px !important;">
                                                <b>@creditCard.ReferenceName</b>
                                            </div>
                                            <div class="mat-body1" style="padding: 5px !important;">
                                                <p>
                                                    <b>Disponível:&nbsp;</b>@creditCard.AvailableAmount.ToString("c") de @creditCard.Limit.ToString("c")
                                                </p>
                                            </div>
                                            <MatProgressBar Progress="@creditCard.AvailableRate"></MatProgressBar>
                                            <MatCaption Style="text-align: left !important;">
                                                <p>@creditCard.Brand</p>
                                            </MatCaption>
                                        </MatCardContent>
                                    </MatCard>
                                </div>
                            }
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                <MatCard Class="mat-elevation-z2 mdc-theme--secondary-bg mdc-theme--on-secondary" Style="padding: 5px !important;"
                                         @onclick="e => { _newCreditCardDialogOpened = true; }">
                                    <MatCardContent>
                                        <div class="mat-body1" style="padding: 5px !important;">
                                            <b>Adicionar Novo Cartão</b>
                                        </div>
                                        <div class="mat-body1" style="padding: 5px !important; margin-top: 24px;">
                                            <p>
                                                <b>&nbsp;</b>
                                            </p>
                                        </div>
                                        <MatProgressBar Progress="1"></MatProgressBar>
                                        <MatCaption Style="text-align: left !important;">
                                            <p>&nbsp;</p>
                                        </MatCaption>
                                    </MatCardContent>
                                </MatCard>
                            </div>
                        </div>
                    </MatTab>
                    <MatTab Label="Receitas">
                        <div class="mat-layout-grid-inner">
                            @foreach (var revenue in _selectedMember.Revenues)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                    <MatCard Class="mat-elevation-z2" Style="padding: 5px !important">
                                        <MatCardContent>
                                            <div class="mat-body1" style="padding: 5px !important;">
                                                <b>@revenue.ReferenceName</b>
                                            </div>
                                            <div class="mat-body1" style="padding: 5px !important;">
                                                <p>
                                                    <b>Valor:&nbsp;</b>@revenue.Amount.ToString("c")
                                                </p>
                                            </div>
                                        </MatCardContent>
                                    </MatCard>
                                </div>
                            }
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="padding: 5px !important;">
                                <MatCard Class="mat-elevation-z2 mdc-theme--secondary-bg mdc-theme--on-secondary" Style="padding: 5px !important;"
                                         @onclick="e => { _newRevenueDialogOpened = true; }">
                                    <MatCardContent>
                                        <div class="mat-body1" style="padding: 5px !important;">
                                            <b>Adicionar Nova Fonte de Renda</b>
                                        </div>
                                        <div class="mat-body1" style="padding: 5px !important; margin-top: 8px;">
                                            &nbsp;
                                        </div>
                                    </MatCardContent>
                                </MatCard>
                            </div>
                        </div>
                    </MatTab>
                </MatTabGroup>
            </div>
        }
    </div>
</div>

<MatDialog @bind-IsOpen="@_newMemberDialogOpened">
    <MatDialogTitle>Novo Membro</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_createMemberCommand.Name" Label="Nome"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _newMemberDialogOpened = false; })">Cancelar</MatButton>
        <MatButton OnClick="@CreateMemberAsync" Raised="true">Adicionar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_newAccountDialogOpened">
    <MatDialogTitle>Nova Conta</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_createAccountCommand.ReferenceName" Label="Nome"></MatTextField>
        <MatTextField @bind-Value="@_createAccountCommand.Bank" Label="Banco"></MatTextField>
        <MatTextField @bind-Value="@_createAccountCommand.Agency" Label="Agência"></MatTextField>
        <MatTextField @bind-Value="@_createAccountCommand.Number" Label="Número"></MatTextField>
        <div>
            <MatCheckbox @bind-Value="@_createAccountCommand.IsSaving" Label="Poupança?"></MatCheckbox>
        </div>
        <p>
            <MatNumericUpDownField Label="Saldo Atual"
                                   @bind-Value="@_createAccountCommand.Balance">
            </MatNumericUpDownField>
        </p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _newAccountDialogOpened = false; })">Cancelar</MatButton>
        <MatButton OnClick="@CreateAccountAsync" Raised="true">Adicionar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_newCreditCardDialogOpened">
    <MatDialogTitle>Novo Cartão de Crédito</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_createCreditCardCommand.ReferenceName" Label="Identificador"></MatTextField>
        <p>
            <MatSelectValue Label="Bandeira"
                            @bind-Value="@_createCreditCardCommand.Brand"
                            Items="@CreateMemberCreditCardCommand.Brands"
                            ValueSelector=@(i=> i)></MatSelectValue>
        </p>
        <MatTextField @bind-Value="@_createCreditCardCommand.HolderName" Label="Nome no cartão"></MatTextField>
        <MatTextField @bind-Value="@_createCreditCardCommand.Number" Label="Número"></MatTextField>
        <MatTextField @bind-Value="@_createCreditCardCommand.ExpirationDate" Label="Validade"></MatTextField>
        <MatTextField @bind-Value="@_createCreditCardCommand.VerificationCode" Label="CVV"></MatTextField>
        <MatTextField @bind-Value="@_createCreditCardCommand.DueDay" Label="Vencimento"></MatTextField>
        <MatTextField @bind-Value="@_createCreditCardCommand.InvoiceClosingDay" Label="Fechamento da Fatura"></MatTextField>
        <p>
            <MatNumericUpDownField Label="Limite" @bind-Value="@_createCreditCardCommand.Limit">
            </MatNumericUpDownField>
        </p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _newCreditCardDialogOpened = false; })">Cancelar</MatButton>
        <MatButton OnClick="@CreateCreditCardAsync" Raised="true">Adicionar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_newRevenueDialogOpened">
    <MatDialogTitle>Nova Fonte de Renda</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_createRevenueCommand.ReferenceName" Label="Identificador"></MatTextField>
        <p>
            <MatSelectItem Label="Conta"
                           @bind-Value="@_createRevenueCommand.Account"
                           Items="@GetAccountList()">
            </MatSelectItem>
        </p>
        <p>
            <MatNumericUpDownField Label="Valor (R$)" @bind-Value="@_createRevenueCommand.Amount">
            </MatNumericUpDownField>
        </p>
        <p>
            <MatSelectValue Label="Tipo de recebimento"
                            @bind-Value="@_createRevenueCommand.CreditDayType"
                            Items="@CreateMemberRevenueCommand.RevenueCreditDayTypes"
                            ValueSelector=@(i=> CreateMemberRevenueCommand.GetRevenueCreditDayKey(i))></MatSelectValue>
        </p>
        <p>
            <MatNumericUpDownField Label="@CreateMemberRevenueCommand.GetRevenueCreditDayValue(_createRevenueCommand.CreditDayType)"
                                   @bind-Value="@_createRevenueCommand.CreditDayValue">
            </MatNumericUpDownField>
        </p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _newRevenueDialogOpened = false; })">Cancelar</MatButton>
        <MatButton OnClick="@CreateRevenueAsync" Raised="true">Adicionar</MatButton>
    </MatDialogActions>
</MatDialog>

<MatSnackbar @bind-IsOpen="@_showErrorMessage">
    <MatSnackbarContent>@_errorMessage</MatSnackbarContent>
    <MatSnackbarActions>
        <MatButton @onclick="e => _showErrorMessage = false">Fechar</MatButton>
    </MatSnackbarActions>
</MatSnackbar>

@code {
    private bool _showErrorMessage = false;
    private string _errorMessage = string.Empty;
    private bool _newMemberDialogOpened = false;
    private bool _newAccountDialogOpened = false;
    private bool _newCreditCardDialogOpened = false;
    private bool _newRevenueDialogOpened = false;
    private int _selectedMemberActiveTabIndex = 0;
    private IEnumerable<GetAllMemberResponse> _members;
    private MemberDetailedResponse _selectedMember;
    private CreateMemberCommand _createMemberCommand = new CreateMemberCommand();
    private CreateMemberAccountCommand _createAccountCommand = new CreateMemberAccountCommand();
    private CreateMemberCreditCardCommand _createCreditCardCommand = new CreateMemberCreditCardCommand();
    private CreateMemberRevenueCommand _createRevenueCommand = new CreateMemberRevenueCommand();

    protected override async Task OnInitializedAsync()
    {
        await LoadMembersList();
    }

    private async Task ViewMemberAsync(GetAllMemberResponse member)
    {
        _selectedMember = await _memberAppService.GetById(member.Id);
    }

    private async Task CreateMemberAsync()
    {
        await _memberAppService.Create(_createMemberCommand);
        _newMemberDialogOpened = false;
        _createMemberCommand = new CreateMemberCommand();
        await LoadMembersList();
    }

    private async Task CreateAccountAsync()
    {
        _createAccountCommand.MemberId = _selectedMember.Id;

        await _memberAppService.AddAccount(_createAccountCommand);
        _newAccountDialogOpened = false;
        _createAccountCommand = new CreateMemberAccountCommand();
        await LoadMembersList();
    }

    private async Task CreateCreditCardAsync()
    {
        _createCreditCardCommand.HolderId = _selectedMember.Id;

        await _memberAppService.AddCreditCard(_createCreditCardCommand);
        _newCreditCardDialogOpened = false;
        _createCreditCardCommand = new CreateMemberCreditCardCommand();
        await LoadMembersList();
    }

    private async Task CreateRevenueAsync()
    {
        await _memberAppService.AddRevenue(_createRevenueCommand);
        _newRevenueDialogOpened = false;
        _createRevenueCommand = new CreateMemberRevenueCommand();
        await LoadMembersList();
    }

    private async Task LoadMembersList()
    {
        try
        {
            _members = await _memberAppService.GetAll();

            if (!string.IsNullOrEmpty(_selectedMember?.Id))
            {
                await _memberAppService.GetById(_selectedMember.Id);
            }

            _selectedMember = _members.Any() ? await _memberAppService.GetById(_members.FirstOrDefault().Id) : MemberDetailedResponse.Empty;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _showErrorMessage = true;
        }
    }

    private IReadOnlyList<MemberDetailedAccountResponse> GetAccountList()
    {
        if (_selectedMember == null || _selectedMember.Accounts == null || !_selectedMember.Accounts.Any())
        {
            return new List<MemberDetailedAccountResponse>(0);
        }

        return _selectedMember.Accounts.ToList();
    }
}
